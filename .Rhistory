<<<<<<< HEAD
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
data <<- readRDS(path)
# found some id != idx
data$idx <- data$id
data <- as.data.frame(data)
initial.model <- glm(initial.formula, data = data, family = binomial)
# full.model <- glm(full.formula, data = data, family = binomial)
stepwise_both <- step(initial.model,
direction = "both")
sel.variables <- all.vars(formula(stepwise_both))[-1]
proxy_both <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_both, collapse = "+")
proxy_both.data.i <- paste0("proxy_both.data.", i)
assign(proxy_both.data.i, proxyform)
# Save the result to an .rds file
save_path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.", i, ".RData")
save(list = proxy_both.data.i, file = save_path)
rm(data,
initial.model,
full.model,
stepwise_both,
sel.variables,
proxy_both,
proxyform,
proxy_both.data.i)
gc()
}
results <- mclapply(1:12, proxy_select, mc.cores = n_cores)
View(results)
results[[1]]
proxy_select <- function(i) {
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
assign("data", readRDS(path), envir = .GlobalEnv)
# found some id != idx
data$idx <- data$id
data <- as.data.frame(data)
initial.model <- glm(initial.formula, data = data, family = binomial)
# full.model <- glm(full.formula, data = data, family = binomial)
stepwise_both <- step(initial.model,
direction = "both")
sel.variables <- all.vars(formula(stepwise_both))[-1]
proxy_both <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_both, collapse = "+")
proxy_both.data.i <- paste0("proxy_both.data.", i)
assign(proxy_both.data.i, proxyform)
# Save the result to an .rds file
save_path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.", i, ".RData")
save(list = proxy_both.data.i, file = save_path)
rm(data,
initial.model,
full.model,
stepwise_both,
sel.variables,
proxy_both,
proxyform,
proxy_both.data.i)
gc()
}
results <- mclapply(1:12, proxy_select, mc.cores = n_cores)
load("~/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.2.RData")
load("~/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.6.RData")
load("~/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.4.RData")
load("~/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.5.RData")
data
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_1.rds")
assign("data", readRDS(path), envir = .GlobalEnv)
assign("data", readRDS(path), envir = .GlobalEnv)
rm(list = ls())
data
ds
closeAllConnections()
ds
proxy_select <- function(i) {
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
assign("ds", readRDS(path), envir = .GlobalEnv)
# found some id != idx
ds$idx <- ds$id
ds <- as.data.frame(ds)
initial.model <- glm(initial.formula, data = ds, family = binomial)
# full.model <- glm(full.formula, data = data, family = binomial)
stepwise_both <- step(initial.model,
direction = "both")
sel.variables <- all.vars(formula(stepwise_both))[-1]
proxy_both <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_both, collapse = "+")
proxy_both.data.i <- paste0("proxy_both.data.", i)
assign(proxy_both.data.i, proxyform)
# Save the result to an .rds file
save_path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.", i, ".RData")
save(list = proxy_both.data.i, file = save_path)
rm(ds,
initial.model,
full.model,
stepwise_both,
sel.variables,
proxy_both,
proxyform,
proxy_both.data.i)
gc()
}
results <- mclapply(1:12, proxy_select, mc.cores = n_cores)
exposure <- "obese"
outcome <- "diabetes"
investigator.specified.covariates <-
c(# Demographic
"age.cat", "sex", "education", "race",
"marital", "income", "born", "year",
# health history related variables/access
"diabetes.family.history", "medical.access",
# behavioral
"smoking", "diet.healthy", "physical.activity", "sleep",
# Laboratory
"uric.acid", "protein.total", "bilirubin.total", "phosphorus",
"sodium", "potassium", "globulin", "calcium.total",
"systolicBP", "diastolicBP", "high.cholesterol"
)
covform <- paste0(investigator.specified.covariates, collapse = "+")
out.formula <- as.formula(paste0("outcome", "~", "exposure"))
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_1.rds")
data1 <- readRDS(path)
proxy.list <- names(data1[, c(grep("^rec", names(data1), value = TRUE))])
covarsTfull <- c(investigator.specified.covariates, proxy.list)
Y.form <- as.formula(paste0(c("outcome~ exposure",
covarsTfull), collapse = "+"))
initial.formula <- as.formula(paste0("outcome~exposure+",
covform,
collapse = "+"))
full.formula <- as.formula(paste0("outcome~exposure+",
paste0(covarsTfull, collapse = "+"),
collapse = "+"))
# ---------------------------------------------------------------
n_cores <- 12  # Match this to the --ntasks value in your Slurm script
results <- mclapply(1:12, proxy_select, mc.cores = n_cores)
View(results)
results[[1]]
load("~/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.2.RData")
load("~/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.6.RData")
load("~/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.5.RData")
ds
proxy_select <- function(i) {
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
ds <<- readRDS(path)
# found some id != idx
ds$idx <- ds$id
ds <- as.data.frame(ds)
initial.model <- glm(initial.formula, data = ds, family = binomial)
# full.model <- glm(full.formula, data = data, family = binomial)
stepwise_both <- step(initial.model,
direction = "both", data = ds)
sel.variables <- all.vars(formula(stepwise_both))[-1]
proxy_both <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_both, collapse = "+")
proxy_both.data.i <- paste0("proxy_both.data.", i)
assign(proxy_both.data.i, proxyform)
return(proxyform)
# Save the result to an .rds file
#save_path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.", i, ".RData")
#save(list = proxy_both.data.i, file = save_path)
}
results <- mclapply(1:12, proxy_select, mc.cores = n_cores)
View(results)
proxy_select <- function(i) {
browser()
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
ds <<- readRDS(path)
# found some id != idx
ds$idx <- ds$id
ds <- as.data.frame(ds)
initial.model <- glm(initial.formula, data = ds, family = binomial)
# full.model <- glm(full.formula, data = data, family = binomial)
stepwise_both <- step(initial.model,
direction = "both", data = ds)
sel.variables <- all.vars(formula(stepwise_both))[-1]
proxy_both <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_both, collapse = "+")
proxy_both.data.i <- paste0("proxy_both.data.", i)
assign(proxy_both.data.i, proxyform)
return(proxyform)
# Save the result to an .rds file
#save_path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.", i, ".RData")
#save(list = proxy_both.data.i, file = save_path)
}
proxy_select(1)
View(stepwise_both)
proxy_select <- function(i) {
browser()
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
ds <<- readRDS(path)
# found some id != idx
ds$idx <- ds$id
ds <- as.data.frame(ds)
initial.model <- glm(initial.formula, data = ds, family = binomial)
full.model <- glm(full.formula, data = data, family = binomial)
stepwise_both <- stepAIC(initial.model,
scope = list(lower = initial.model,
upper = full.model),
direction = "both")
sel.variables <- all.vars(formula(stepwise_both))[-1]
proxy_both <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_both, collapse = "+")
proxy_both.data.i <- paste0("proxy_both.data.", i)
assign(proxy_both.data.i, proxyform)
return(proxyform)
# Save the result to an .rds file
#save_path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.", i, ".RData")
#save(list = proxy_both.data.i, file = save_path)
}
proxy_select(1)
proxy_select <- function(i) {
browser()
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
ds <<- readRDS(path)
# found some id != idx
ds$idx <- ds$id
ds <- as.data.frame(ds)
initial.model <- glm(initial.formula, data = ds, family = binomial)
full.model <- glm(full.formula, data = ds, family = binomial)
stepwise_both <- stepAIC(initial.model,
scope = list(lower = initial.model,
upper = full.model),
direction = "both")
sel.variables <- all.vars(formula(stepwise_both))[-1]
proxy_both <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_both, collapse = "+")
proxy_both.data.i <- paste0("proxy_both.data.", i)
assign(proxy_both.data.i, proxyform)
return(proxyform)
# Save the result to an .rds file
#save_path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.", i, ".RData")
#save(list = proxy_both.data.i, file = save_path)
}
proxy_select(1)
stepAIC(initial.model,
scope = list(lower = initial.model,
upper = full.model),
direction = "both")
library(MASS)
stepAIC(initial.model,
+         scope = list(lower = initial.model,
stepAIC(initial.model, scope = list(lower = initial.model,  upper = full.model),   direction = "both")
proxy_select <- function(i) {
browser()
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
ds <<- readRDS(path)
# found some id != idx
ds$idx <- ds$id
ds <- as.data.frame(ds)
initial.model <- glm(initial.formula, data = ds, family = binomial)
full.model <- glm(full.formula, data = ds, family = binomial)
stepwise_both <- stepAIC(initial.model,
scope = list(lower = initial.model,
upper = full.model),
direction = "both")
sel.variables <- all.vars(formula(stepwise_both))[-1]
proxy_both <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_both, collapse = "+")
proxy_both.data.i <- paste0("proxy_both.data.", i)
assign(proxy_both.data.i, proxyform)
return(proxyform)
# Save the result to an .rds file
#save_path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.", i, ".RData")
#save(list = proxy_both.data.i, file = save_path)
}
proxy_select(1)
proxy_select <- function(i) {
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
ds <<- readRDS(path)
# found some id != idx
ds$idx <- ds$id
initial.model <- glm(initial.formula, data = ds, family = binomial)
full.model <- glm(full.formula, data = ds, family = binomial)
stepwise_both <- stepAIC(initial.model,
scope = list(lower = initial.model,
upper = full.model),
direction = "both")
sel.variables <- all.vars(formula(stepwise_both))[-1]
proxy_both <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_both, collapse = "+")
proxy_both.data.i <- paste0("proxy_both.data.", i)
assign(proxy_both.data.i, proxyform)
return(proxyform)
# Save the result to an .rds file
save_path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.", i, ".RData")
save(list = proxy_both.data.i, file = save_path)
}
results <- mclapply(1:12, proxy_select, mc.cores = n_cores)
proxy_select <- function(i) {
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
ds <- readRDS(path)
# found some id != idx
ds$idx <- ds$id
initial.model <- glm(initial.formula, data = ds, family = binomial)
full.model <- glm(full.formula, data = ds, family = binomial)
stepwise_both <- stepAIC(initial.model,
scope = list(lower = initial.model,
upper = full.model),
direction = "both")
sel.variables <- all.vars(formula(stepwise_both))[-1]
proxy_both <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_both, collapse = "+")
proxy_both.data.i <- paste0("proxy_both.data.", i)
assign(proxy_both.data.i, proxyform)
return(proxyform)
# Save the result to an .rds file
save_path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.", i, ".RData")
save(list = proxy_both.data.i, file = save_path)
}
results <- mclapply(1:12, proxy_select, mc.cores = n_cores)
proxy_select <- function(i) {
browser()
path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
ds <- readRDS(path)
# found some id != idx
ds$idx <- ds$id
initial.model <- glm(initial.formula, data = ds, family = binomial)
full.model <- glm(full.formula, data = ds, family = binomial)
stepwise_both <- stepAIC(initial.model,
scope = list(lower = initial.model,
upper = full.model),
direction = "both")
sel.variables <- all.vars(formula(stepwise_both))[-1]
proxy_both <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_both, collapse = "+")
proxy_both.data.i <- paste0("proxy_both.data.", i)
assign(proxy_both.data.i, proxyform)
return(proxyform)
# Save the result to an .rds file
save_path <- paste0("/Users/jidianlewei/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.3_both/proxy_both.data.", i, ".RData")
save(list = proxy_both.data.i, file = save_path)
}
proxy_select(1)
getwd()
/scratch/st-mekarim-1/leiyang1
rm(list = ls())
# try parallel
library(parallel)
library(autoCovariateSelection)
library(dplyr)
library(cobalt)
library(WeightIt)
library(ggplot2)
library(lmtest)
library(MASS)
library(Boruta)
library(GA)
library(mclust)
library(penalizedSVM)
library(xgboost)
library(caret)
library(randomForest)
library(glmnet)
### global information
exposure <- "obese"
outcome <- "diabetes"
investigator.specified.covariates <-
c(# Demographic
"age.cat", "sex", "education", "race",
"marital", "income", "born", "year",
# health history related variables/access
"diabetes.family.history", "medical.access",
# behavioral
"smoking", "diet.healthy", "physical.activity", "sleep",
# Laboratory
"uric.acid", "protein.total", "bilirubin.total", "phosphorus",
"sodium", "potassium", "globulin", "calcium.total",
"systolicBP", "diastolicBP", "high.cholesterol"
)
covform <- paste0(investigator.specified.covariates, collapse = "+")
out.formula <- as.formula(paste0("outcome", "~", "exposure"))
path <- paste0("../hdPS_ProxySelect/simData/scenario/data_1.rds")
data1 <- readRDS(path)
proxy.list <- names(data1[, c(grep("^rec", names(data1), value = TRUE))])
covarsTfull <- c(investigator.specified.covariates, proxy.list)
Y.form <- as.formula(paste0(c("outcome~ exposure",
covarsTfull), collapse = "+"))
gaOpt <- function(vars, IV.train, DV.train) {
varNames <- colnames(IV.train) #getting names of all variables
selectedVarNames <- varNames[vars == "1"] # getting names of selected vars from GA
gaSolutionData <- IV.train[,selectedVarNames] # keeping only those selected vars
gaDat <- cbind(gaSolutionData,DV.train) # combining selected variables with outcome variable
gaMod <- glm(DV.train ~ ., family = "binomial", data = gaDat) #build model
gaProb <- predict(gaMod, IV.train, type = "response") # get probabilities
gaPred <- ifelse(gaProb >= .8, 1, 0) # get predicted 0s and 1s
ari <- adjustedRandIndex(gaPred, DV.train)
return(ari)
}
# -------------
n_cores <- 12  # Match this to the --ntasks value in your Slurm script
proxy_select <- function(i) {
path <- paste0("/scratch/st-mekarim-1/leiyang1/hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
data <- readRDS(path)
# found some id != idx
data$idx <- data$id
covar.mat <- model.matrix(Y.form, data = data)[,-1]
ga.fit <- ga(fitness = function(vars)
gaOpt(vars = vars,
IV.train = data.frame(covar.mat),
DV.train = data$outcome),
type = "binary",
nBits = ncol(covar.mat),
names = colnames(covar.mat),
seed = 42,
run=5)
sel.variables <- proxy.list[ga.fit@solution[1,]==1]
proxy_ga <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_ga, collapse = "+")
proxy_ga.data.i <- paste0("proxy_ga.data.", i)
assign(proxy_ga.data.i, proxyform)
# Save the result to an .rds file
save_path <- paste0("/scratch/st-mekarim-1/leiyang1/hdPS_ProxySelect/simResults_scenario/6_ga/proxy_ga.data.", i, ".RData")
save(list = proxy_ga.data.i, file = save_path)
rm(data,
covar.mat,
ga.fit,
sel.variables,
proxy_ga,
proxyform,
proxy_ga.data.i)
gc()
}
proxy_select(1)
proxy_select <- function(i) {
path <- paste0("../hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
data <- readRDS(path)
# found some id != idx
data$idx <- data$id
covar.mat <- model.matrix(Y.form, data = data)[,-1]
ga.fit <- ga(fitness = function(vars)
gaOpt(vars = vars,
IV.train = data.frame(covar.mat),
DV.train = data$outcome),
type = "binary",
nBits = ncol(covar.mat),
names = colnames(covar.mat),
seed = 42,
run=5)
sel.variables <- proxy.list[ga.fit@solution[1,]==1]
proxy_ga <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_ga, collapse = "+")
proxy_ga.data.i <- paste0("proxy_ga.data.", i)
assign(proxy_ga.data.i, proxyform)
# Save the result to an .rds file
save_path <- paste0("../hdPS_ProxySelect/simResults_scenario/6_ga/proxy_ga.data.", i, ".RData")
save(list = proxy_ga.data.i, file = save_path)
rm(data,
covar.mat,
ga.fit,
sel.variables,
proxy_ga,
proxyform,
proxy_ga.data.i)
gc()
}
proxy_select(1)
load("~/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/6_ga/proxy_ga.data.52.RData")
proxy_ga.data.52
proxy_select <- function(i) {
path <- paste0("../hdPS_ProxySelect/simData/scenario/data_", i, ".rds")
data <- readRDS(path)
# found some id != idx
data$idx <- data$id
covar.mat <- model.matrix(Y.form, data = data)[,-1]
ga.fit <- ga(fitness = function(vars)
gaOpt(vars = vars,
IV.train = data.frame(covar.mat),
DV.train = data$outcome),
type = "binary",
nBits = ncol(covar.mat),
names = colnames(covar.mat),
seed = 42,
run=5)
sel.variables <- proxy.list[ga.fit@solution[1,]==1]
proxy_ga <- proxy.list[proxy.list %in% sel.variables]
proxyform <- paste0(proxy_ga, collapse = "+")
proxy_ga.data.i <- paste0("proxy_ga.data.", i)
assign(proxy_ga.data.i, proxyform)
# Save the result to an .rds file
save_path <- paste0("../hdPS_ProxySelect/simResults_scenario/6_ga/proxy_ga.data.", i, ".RData")
save(list = proxy_ga.data.i, file = save_path)
rm(data,
covar.mat,
ga.fit,
sel.variables,
proxy_ga,
proxyform,
proxy_ga.data.i)
gc()
}
results <- mclapply(1:3, proxy_select, mc.cores = n_cores)
load("~/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/10.1_forward/forward.RData")
View(RD_forward)
load("~/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/6_ga/ga.RData")
View(RD_ga)
RD_rf <- data.frame(numProxy = integer(a), RD = numeric(a), SE = numeric(a))
a <- 1000
b <- 0
RD_rf <- data.frame(numProxy = integer(a), RD = numeric(a), SE = numeric(a))
result <- c(1,2,3,4)
RD_rf[1, ] <- result[2:4]
View(RD_rf)
names(RD_rf)[i] <- result[1]
names(RD_rf)[1] <- result[1]
View(RD_rf)
RD_rf <- data.frame(numProxy = integer(a), RD = numeric(a), SE = numeric(a))
i <- 1
RD_rf[i,] <- result[2:4]
rownames(RD_rf)[i] <- result[1]
rm()
rm(list = ls())
load("~/Desktop/WL_MachineLearning/hdPS/hdPS_ProxySelect/simResults_scenario/8_rf/rf.RData")
View(RD_rf)
=======
a <- readRDS("E:/GitHub/PlasmodeSim/data/performance/results/simResults_a_ps-OR1.rds")
head(a)
e <- readRDS("E:/GitHub/PlasmodeSim/data/performance/results/simResults_a_earth-OR1.rds")
head(e)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/1_bross/bross.RData")
View(RD_bross)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/2_hybrid/hybrid.RData")
View(RD_hybrid)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/3_lasso/lasso.RData")
View(RD_lasso)
View(RD_lasso)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/4_enet/enet.RData")
View(RD_enet)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/6_ga/ga.RData")
View(RD_ga)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/7_xgboost/xgboost.RData")
View(RD_xgboost)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/10.1_forward/forward.RData")
View(RD_forward)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/10.2_backward/backward.RData")
View(RD_backward)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/10.3_both/both.RData")
View(RD_both)
library(rsimsum)
est.PS <- readRDS("simResults_scenario/3_lasso/lasso.RData")
setwd("E:/GitHub/hdPS-proxy-select")
load("simResults_scenario/3_lasso/lasso.RData")
est.PS <- RD_lasso
head(est.PS)
library(rsimsum)
load("simResults_scenario/3_lasso/lasso.RData")
est.LASSO <- RD_lasso
est.LASSO$model <- "LASSO"
load("simResults_scenario/4_enet/enet.RData")
est.Enet <- RD_enet
est.Enet$model <- "Enet"
est <- rbind(est.LASSO, est.Enet)
est$model <- as.factor(est$model)
table(est$model)
names(est)
theta <- 0 # for RD or ATE; this would be 1 for OR
s1 <- simsum(data = est, estvarname = "RD", true = theta, se = "SE",
methodvar = "model", ref = "LASSO", x = TRUE)
ss1 <- summary(s1)
ss1
require(ggplot2)
custom_theme <- theme_minimal() +
theme(
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom"
)
unique(ss1$summ$stat)
autoplot(s1, type = "lolly", stats = "nsim")+ custom_theme
autoplot(s1, type = "lolly", stats = "bias")+ custom_theme  + labs(x = "Bias")
ggsave(filename = "images/bias.png")
autoplot(s1, type = "lolly", stats = "relerror")+ custom_theme  + labs(x = "Relative % error")
autoplot(s1, type = "lolly", stats = "cover")+ custom_theme  + labs(x = "95% coverage")
ggsave(filename = "images/cover.png")
autoplot(s1, type = "lolly", stats = "becover")+ custom_theme  + labs(x = "95% bias-eliminated coverage")
ggsave(filename = "images/becover.png")
autoplot(s1, type = "lolly", stats = "modelse")+ custom_theme + labs(x = "Model SE")
ggsave(filename = "images/modelse.png")
autoplot(s1, type = "lolly", stats = "empse")+ custom_theme  + labs(x = "Empirical SE")
ggsave(filename = "images/empse.png")
autoplot(s1, type = "lolly", stats = "mse")+ custom_theme + labs(x = "MSE")
autoplot(s1, type = "lolly", stats = "relprec")+ custom_theme
autoplot(s1, type = "lolly", stats = "power")+ custom_theme
zip_plot <- autoplot(s1, type = "zip", zoom = 0.5) + custom_theme
dashed_line <- geom_hline(yintercept = 0.95, linetype = "dashed", color = "blue")
zip_plot +
annotate("segment", x = -Inf, xend = Inf, y = 0.95, yend = 0.95, linetype = "dashed", color = "blue") +
dashed_line
ggsave(filename = "images/zip.png")
ss1
>>>>>>> 1880061b294c444b00396342067e55ccb2afbfd7
