a <- readRDS("E:/GitHub/PlasmodeSim/data/performance/results/simResults_a_ps-OR1.rds")
head(a)
e <- readRDS("E:/GitHub/PlasmodeSim/data/performance/results/simResults_a_earth-OR1.rds")
head(e)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/1_bross/bross.RData")
View(RD_bross)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/2_hybrid/hybrid.RData")
View(RD_hybrid)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/3_lasso/lasso.RData")
View(RD_lasso)
View(RD_lasso)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/4_enet/enet.RData")
View(RD_enet)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/6_ga/ga.RData")
View(RD_ga)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/7_xgboost/xgboost.RData")
View(RD_xgboost)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/10.1_forward/forward.RData")
View(RD_forward)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/10.2_backward/backward.RData")
View(RD_backward)
load("E:/GitHub/hdPS-proxy-select/simResults_scenario/10.3_both/both.RData")
View(RD_both)
library(rsimsum)
est.PS <- readRDS("simResults_scenario/3_lasso/lasso.RData")
setwd("E:/GitHub/hdPS-proxy-select")
load("simResults_scenario/3_lasso/lasso.RData")
est.PS <- RD_lasso
head(est.PS)
library(rsimsum)
load("simResults_scenario/3_lasso/lasso.RData")
est.LASSO <- RD_lasso
est.LASSO$model <- "LASSO"
load("simResults_scenario/4_enet/enet.RData")
est.Enet <- RD_enet
est.Enet$model <- "Enet"
est <- rbind(est.LASSO, est.Enet)
est$model <- as.factor(est$model)
table(est$model)
names(est)
theta <- 0 # for RD or ATE; this would be 1 for OR
s1 <- simsum(data = est, estvarname = "RD", true = theta, se = "SE",
methodvar = "model", ref = "LASSO", x = TRUE)
ss1 <- summary(s1)
ss1
require(ggplot2)
custom_theme <- theme_minimal() +
theme(
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "bottom"
)
unique(ss1$summ$stat)
autoplot(s1, type = "lolly", stats = "nsim")+ custom_theme
autoplot(s1, type = "lolly", stats = "bias")+ custom_theme  + labs(x = "Bias")
ggsave(filename = "images/bias.png")
autoplot(s1, type = "lolly", stats = "relerror")+ custom_theme  + labs(x = "Relative % error")
autoplot(s1, type = "lolly", stats = "cover")+ custom_theme  + labs(x = "95% coverage")
ggsave(filename = "images/cover.png")
autoplot(s1, type = "lolly", stats = "becover")+ custom_theme  + labs(x = "95% bias-eliminated coverage")
ggsave(filename = "images/becover.png")
autoplot(s1, type = "lolly", stats = "modelse")+ custom_theme + labs(x = "Model SE")
ggsave(filename = "images/modelse.png")
autoplot(s1, type = "lolly", stats = "empse")+ custom_theme  + labs(x = "Empirical SE")
ggsave(filename = "images/empse.png")
autoplot(s1, type = "lolly", stats = "mse")+ custom_theme + labs(x = "MSE")
autoplot(s1, type = "lolly", stats = "relprec")+ custom_theme
autoplot(s1, type = "lolly", stats = "power")+ custom_theme
zip_plot <- autoplot(s1, type = "zip", zoom = 0.5) + custom_theme
dashed_line <- geom_hline(yintercept = 0.95, linetype = "dashed", color = "blue")
zip_plot +
annotate("segment", x = -Inf, xend = Inf, y = 0.95, yend = 0.95, linetype = "dashed", color = "blue") +
dashed_line
ggsave(filename = "images/zip.png")
ss1
