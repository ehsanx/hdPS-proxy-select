# Apply propensity score weighting using WeightIt with SuperLearner
weightit_fit <- weightit(ps_formula,
data = ObsData,
stabilize = TRUE,
method = "ps",
estimand = "ATE")
library(WeightIt)
library(SuperLearner)
library(sandwich)
library(lmtest)
data_dir <- "C:\\Users\\Ehsan\\Documents\\GitHub\\Dragonnet-PS\\data\\RHC\\OR1"  # Directory containing CSV files
file_path <- paste(data_dir, "data_1.csv", sep = "\\")
ObsData <- read.csv(file_path)
ObsData.noYA <- ObsData[ , !(names(ObsData) %in% c("death", "tx", "id"))]
main_effects <- names(ObsData.noYA)
rhsformula <- paste(main_effects, collapse = " + ")
ps_formula <- as.formula(paste("tx ~", rhsformula))
# Apply propensity score weighting using WeightIt with SuperLearner
weightit_fit <- weightit(ps_formula,
data = ObsData,
stabilize = TRUE,
method = "ps",
estimand = "ATE")
# Extract weights from the fit
weights <- weightit_fit$weights
# Construct the formula for the outcome model (death ~ tx + covariates)
outcome_formula <- as.formula(paste("death ~ tx +", rhsformula))
# Estimate ATE using the weighted outcomes with glm (note the correction in family)
ate_model <- glm(outcome_formula, data = ObsData, weights = weights,
family = gaussian("identity"))
# Extract ATE estimate and standard error
ate_estimate <- coef(ate_model)["tx"]
se_ate <- sqrt(sandwich::sandwich(ate_model)["tx","tx"])
#conf.int <- confint(ate_model, "tx", level = 0.95, method = "hc1")
method.name <- "PSw"
Return.obj <- data.frame(
ate_estimate = ate_estimate,
se_ate = se_ate,
# lower_ci = conf.int[1],
# upper_ci = conf.int[2],
method.name = method.name
)
Return.obj
summary(weights)
?trim
library(WeightIt)
library(SuperLearner)
library(sandwich)
library(lmtest)
data_dir <- "C:\\Users\\Ehsan\\Documents\\GitHub\\Dragonnet-PS\\data\\RHC\\OR1"  # Directory containing CSV files
file_path <- paste(data_dir, "data_1.csv", sep = "\\")
ObsData <- read.csv(file_path)
ObsData.noYA <- ObsData[ , !(names(ObsData) %in% c("death", "tx", "id"))]
main_effects <- names(ObsData.noYA)
rhsformula <- paste(main_effects, collapse = " + ")
ps_formula <- as.formula(paste("tx ~", rhsformula))
# Apply propensity score weighting using WeightIt with SuperLearner
weightit_fit <- weightit(ps_formula,
data = ObsData,
stabilize = TRUE,
method = "ps",
estimand = "ATE")
# Extract weights from the fit
weights <- weightit_fit$weights
summary(weights)
weights.trim <- trim(W, at = .01) # update as it was used in other methods to make it comparable
library(WeightIt)
library(SuperLearner)
library(sandwich)
library(lmtest)
data_dir <- "C:\\Users\\Ehsan\\Documents\\GitHub\\Dragonnet-PS\\data\\RHC\\OR1"  # Directory containing CSV files
file_path <- paste(data_dir, "data_1.csv", sep = "\\")
ObsData <- read.csv(file_path)
ObsData.noYA <- ObsData[ , !(names(ObsData) %in% c("death", "tx", "id"))]
main_effects <- names(ObsData.noYA)
rhsformula <- paste(main_effects, collapse = " + ")
ps_formula <- as.formula(paste("tx ~", rhsformula))
# Apply propensity score weighting using WeightIt with SuperLearner
weightit_fit <- weightit(ps_formula,
data = ObsData,
stabilize = TRUE,
method = "ps",
estimand = "ATE")
# Extract weights from the fit
weights <- weightit_fit$weights
summary(weights)
weights.trim <- trim(weights, at = .01) # update as it was used in other methods to make it comparable
summary(weights.trim)
# Construct the formula for the outcome model (death ~ tx + covariates)
outcome_formula <- as.formula(paste("death ~ tx +", rhsformula))
# Estimate ATE using the weighted outcomes with glm (note the correction in family)
ate_model <- glm(outcome_formula,
data = ObsData,
weights = weights.trim,
family = gaussian("identity"))
# Extract ATE estimate and standard error
ate_estimate <- coef(ate_model)["tx"]
se_ate <- sqrt(sandwich::sandwich(ate_model)["tx","tx"])
#conf.int <- confint(ate_model, "tx", level = 0.95, method = "hc1")
method.name <- "PSw"
Return.obj <- data.frame(
ate_estimate = ate_estimate,
se_ate = se_ate,
# lower_ci = conf.int[1],
# upper_ci = conf.int[2],
method.name = method.name
)
Return.obj
library(shiny); runApp('~/GitHub/hdPS-proxy-select/doc/hdPSApp.R')
data_combined <- data.frame(
Method = rep(c("KitchenSink", "Bross", "Hybrid", "LASSO", "ElasticNet", "RF", "XGBoost", "FS", "BE", "GA"), 2),
# These are approximate values
Value = c(0.075, 0.077, 0.079, 0.078, 0.075, 0.085, 0.082, 0.078, 0.078, 0.076,
1.502, 1.522, 1.543, 1.531, 1.504, 1.588, 1.564, 1.533, 1.533, 1.515),
LowerCI = c(0.056, 0.058, 0.06, 0.059, 0.056, 0.066, 0.063, 0.059, 0.059, 0.057,
1.395, 1.413, 1.432, 1.421, 1.396, 1.474, 1.452, 1.423, 1.423, 1.406),
UpperCI = c(0.095, 0.096, 0.099, 0.098, 0.094, 0.104, 0.101, 0.097, 0.097, 0.096,
1.618, 1.64, 1.663, 1.65, 1.62, 1.712, 1.685, 1.653, 1.653, 1.632),
Measure = rep(c("RD", "OR"), each = 10),
Variables = rep(c(142, 100, 49, 60, 69, 100, 48, 59, 59, 64), 2)
)
round(data_combined,2)
runApp('~/GitHub/hdPS-proxy-select/doc/hdPSApp.R')
